	includelib kernel32.lib	; Windows kernel interface
GetStdHandle	proto		; Function to retrieve I/O handles
WriteConsoleA	proto		; Function that writes to command window
ReadConsoleA	proto		; Function that reads from command window
Console		equ	-11	; Device code for console text output.
Keyboard	equ	-10	; Device code for console text input.
MaxBuf		equ	40	; Maximum input buffer size
ExitProcess	proto

;	Macro "txtOut msg,nchar" displays a character string in command window.
;		msg:	Address of ASCII message for command window.
;		nchar:	Address of length of message in bytes 

txtOut	macro	msg,nchar	; Message location and length
	mov	RCX,stdout	; Handle to standard output device 
	lea	RDX,msg		; Pointer to message to display
	mov	R8,nchar	; Number of characters to display
	lea	R9,nbwr		; Number of bytes actually written.
	call	WriteConsoleA	; Write text string to command window.
	endm

	.code

;	Main program that reads text message from user through command
;	window keyin and displays it in same command window.
;		1. Multiple lines are input until only "Enter" key pushed.
;		2. Each line will be output twice: as input and a copy.

main	proc

	sub	RSP,40		; Reserve "shadow space" on stack.

;	Obtain "handles" for console I/O streams

	mov	RCX,Console	; Console standard output handle
	call	GetStdHandle	; Returns handle in register RAX
	mov	stdout,RAX	; Save handle of console display.
	mov	RCX,Keyboard	; Console standard input handle
	call	GetStdHandle	; Returns handle in register RAX
	mov	stdin,RAX	; Save handle for keyboard input.

;	Display the prompt message.

nxtlin:	txtOut	pmsg,plen	; Write text string to command box.

;	Read input line from user keyboard.

	mov 	RCX,stdin	; Handle to standard input device 
	mov	R8,MaxBuf	; Maximum length to receive
	lea	RDX,keymsg	; Memory address to receive input
	lea	R9,nbrd		; Number of bytes actually read.
	call	ReadConsoleA	; Read text string from command box.
	txtOut	keymsg,nbrd	; Write text back to command box.

;	Copy message to a second buffer and display it, too.

	lea	RSI,keymsg	; Points to input buffer
	lea	RDI,dismsg	; Points to display buffer
	mov	RCX,MAXBUF	; Size of buffer in quad words
cpylp:	movsq			; Copy next quad word, increment RSI and RDI.
	loop	cpylp		; Continue until all copied.
	txtOut	dismsg,nbrd	; Write text back to command box.

;	Go get another line, but exit if only "Enter" key was input.

	mov	R8,nbrd		; Length (bytes) of input message
	cmp	R8,2		; Test if only CR and LF characters.
	jg	nxtlin		; Loop back around to get another input.

	add	RSP,40		; Replace "shadow space" on stack
	mov	RCX,0		; Set exit status code to zero.
	call	ExitProcess	; Return control to Windows.
main	endp

	.data
pmsg	byte	"Please enter text message: "
	align	16		; Set memory location on 16 byte boundary.
cvt	byte	16 DUP (20h)	; Pattern to convert letter case.
plen	qword	lengthof pmsg	; Number of bytes in prompt message.
stdout	qword	?		; Handle to standard output device
nbwr	qword	?		; Number of bytes actually written
stdin	qword	?		; Handle to standard input device
nbrd	qword	?		; Number of bytes actually read
keymsg	qword	MaxBuf DUP (?)	; Memory buffer for keyboard input
dismsg	qword	MaxBuf DUP (?)	; Memory buffer for display
	end
